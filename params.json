{"name":"mia-Argon","tagline":"Fast integration of debug options in your Android app","body":"# Argon-Android\r\n![logo](https://github.com/7factory/mia-Argon/raw/master/images/argon_150.png?raw=true \"Argon\")\r\n\r\nFast integration of debug options in your app. \r\n\r\nWhenever your application is running, a configurable notification icon is displayed. This notification links to a configuration activity where you can modify the fields defined in your custom configuration object. This object is consistently stored and updated by `Argon`. Changes to the configuration are applied by restarting the app's process to maintain consistency. You can also adjust the configuration during runtime using the `Argon` API but changes will only be visible after a restart.\r\n\r\n## Using Gradle ##\r\n\r\nAdd the following lines to your root build.gradle:\r\n\r\n``` gradle\r\nallprojects {\r\n    repositories {\r\n        [...]\r\n        maven { url \"https://jitpack.io\" }\r\n    }\r\n}\r\n```\r\n\r\nThen reference the library from your module's build.gradle:\r\n\r\n``` gradle\r\ndependencies {\r\n    [...]\r\n    compile 'com.github.7factory:mia-Argon:0.9.9'\r\n}\r\n```\r\n## Integration ##\r\n\r\nArgon is designed to be easily integrated and configured from your `Application` class. \r\n\r\n1. Create a POJO with your configuration. In the demo example the configuration is deserialized from JSON which might be stored as an asset to provide a default configuration but this is not a necessity.\r\n ```\r\nString json = \"{\\n\" +\r\n                \"\\\"showHeadline\\\": true,\\n\" +\r\n                \"\\\"text\\\": test,\\n\" +\r\n                \"\\\"intValue\\\": 20,\\n\" +\r\n                \"\\\"longValue\\\": 200000000000000000,\\n\" +\r\n                \"\\\"floatValue\\\": 0.5823\\n\" +\r\n                \"}\";\r\n        Gson gson = new Gson();\r\n        ConfigModel defaultConfig = gson.fromJson(json, ConfigModel.class);\r\n```\r\nOptionally, you can use annotations to name your POJO's fields:\r\n ```\r\n public class ConfigModel {\r\n    @Name(\"Headline Flag\")\r\n    public boolean showHeadline;\r\n    @Name(\"Text\")\r\n    public String text;\r\n    @Name(\"Int Value\")\r\n    public int intValue;\r\n    @Name(\"Float Value\")\r\n    public float floatValue;\r\n    @Name(\"Long Value\")\r\n    public long longValue;\r\n}\r\n```\r\nThe raw field names will be used as labels in the configuration `Activity` if no annotations were specified.\r\n\r\n2. Init `Argon` from your `Application` class's `onCreate` Method and configure its appearance. Please note that you should not initialize `Argon` from an `Activity` to ensure correct lifecycle handling.\r\n ``` \r\nArgon.init(this, ConfigModel.class, defaultConfig)\r\n                .setIcon(R.drawable.ic_debug)\r\n                .setTitle(R.string.notification_title)\r\n                .setText(R.string.notification_text)\r\n                .setColor(R.color.colorAccent);\r\n```\r\n\r\n3. Retrieve your configuration from your components with `Argon.getConfig();`.\r\n\r\n4. If you would like to update your configuration, use `Argon.updateConfig(configurationObject);`. Please not that due to consistency considerations these changes will only be available after your app process has been restarted. You can use `Argon.restartProcess();` to respawn your process and apply the changes.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}